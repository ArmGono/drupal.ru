<?php
// $Id$

/**
 * @file Allow to add polls to any node types.
 * @author Romka <mne@romka.eu>
 * @copyright Romka <mne@romka.eu>
 * @license GPL v2
 */

define('ANSWER_PROPERTY', 999);

/**
 * Implementation of hook_form_alter
 */
function inner_poll_form_alter(&$form, $form_state, $form_id) {
	global $user;
	$ipct = variable_get('inner_poll_content_types', array());
	$show = FALSE;
  foreach($ipct as $k => $v) {
    if($ipct[$k] . '_node_form' == $form_id)$show = TRUE;
  }
  
  //foreach($form_state['values'] as $k => $v) drupal_set_message($k . " = " . $v);

  $counter = 0;
	if ($show && user_access('create inner polls')) {
		$choice = array();
		$attr = array();
		if(arg(2)=="edit" && is_numeric(arg(1))) {
		  $nid = arg(1);
		  $node = db_fetch_object(db_query("SELECT uid FROM {node} WHERE nid = %d", $nid));
    	$q = db_query("SELECT * FROM {inner_poll_choices} WHERE nid = %d", arg(1));
    	while($r = db_fetch_object($q)){
    		if($r->chorder != ANSWER_PROPERTY) {
    			$choice[$counter] = $r;
    			$vc = db_fetch_object(db_query("SELECT chvotes AS count FROM {inner_poll_choices} WHERE nid = %d AND chorder = %d", $nid, $r->chorder));
    			if(user_access('edit inner polls') || $node->uid == $user->uid && user_access('edit own inner poll') && $vc->count == 0) {
    				$attr[$counter] = array();
    			} else {
    				$attr[$counter] = array('readonly' => TRUE);
    			}
    			$counter++;
    		}	else {
    		  $vc = db_fetch_object(db_query("SELECT SUM(chvotes) AS count FROM {inner_poll_choices} WHERE nid = %d AND chorder <> %d", $nid, ANSWER_PROPERTY));
    			$choice[ANSWER_PROPERTY] = $r;
    			if(user_access('edit inner polls') || $node->uid == $user->uid && user_access('edit own inner poll') && $vc->count == 0) {
    			 	$attr[ANSWER_PROPERTY] = array();
    			} else $attr[ANSWER_PROPERTY] = array('readonly' => TRUE);
    		}
    	}
		}
		
		//foreach($form_state['values'] as $k => $v) drupal_set_message($k . " = " . $v);
		//drupal_set_message(1);
		if($form_state['values']['question']) {
		  $counter = 0;
		  $choice = array();
		  foreach($form_state['values'] as $k => $v) {
		    if(strstr($k, "choice_")) {
		      $choice[$counter]->chtext = $v;
		      $counter++;		      
		    }
		  }
		  $choice[ANSWER_PROPERTY]->chtext = $form_state['values']['question'];
		}

		if (isset($form['type']) && isset($form['#node'])) {
			$form['inner_poll'] = array(
	        '#type' => 'fieldset',
	        '#access' => user_access('create inner polls'),
	        '#title' => t('Attach poll'),
	        '#collapsible' => TRUE,
	        '#collapsed' => TRUE,
	        '#description' => t('Create poll attached to this node.'),
	        '#weight' => 30,
	      );

		  $form['inner_poll']['question'] = array(
		    '#type' => 'textfield',
		    '#weight' => 0,
		    '#description' => t('question'),
		    '#default_value' => $choice[ANSWER_PROPERTY]->chtext,
		    '#attributes' => $attr[ANSWER_PROPERTY],
		  );

		  // Add a wrapper for the choices and more button.
      $form['inner_poll']['choice_wrapper'] = array(
        '#tree' => FALSE,
        '#weight' => 1,
        '#prefix' => '<div class="clear-block" id="inner-poll-choice-wrapper">',
        '#suffix' => '</div>',
      );

		  if($counter == 0)$counter = 1;
		  else $counter--;
		  for($i = 0; $i <= $counter; $i++) {
		    $form['inner_poll']['choice_wrapper']['choice_' . $i] = array(
		      '#type' => 'textfield',
		      '#tree' => TRUE,
  		    '#weight' => $i,
  		    '#description' => t('choice') . " " . ($i + 1),
  		    '#default_value' => $choice[$i]->chtext,
  		    '#attributes' => $attr[$i],
  		  );
		  }

		  $path = drupal_get_path('module', 'inner_poll');
	  	drupal_add_js($path . '/vote_form.js');
    	$form['inner_poll']['choice_wrapper']['inner_poll_new_id'] = array(
		      '#type' => 'hidden',
    		  '#value' => ($counter + 1),
		      '#weight' => ($counter + 1),
		      '#attributes' => array('id' => 'inner_poll_new_id'),
		      '#suffix' => '<div id="inner_poll_new_fields"></div><div id=\"inner_poll_add_field_link\"><a href="javascript:{}" onClick="addFormField(); return false;">' . t('Add answer') . '</a></div>',
    	);

		  $r = db_fetch_object(db_query("SELECT * FROM {inner_poll} WHERE nid = %d", arg(1)));
		  $form['inner_poll']['multi'] = array(
		    '#type' => 'checkbox',
		    '#weight' => 20,
		    '#title' => t('multiply select?'),
		    '#default_value' => $r->type ? 'checked' : '',
		  );

		  $form['inner_poll']['cancel'] = array(
		    '#type' => 'checkbox',
		    '#weight' => 25,
		    '#title' => t('Users can cancel own votes?'),
		    '#default_value' => $r->cancel ? 'checked' : '',
		  );

		  $_active = array(0 => t('Closed'), 1 => t('Active'));
		  $_duration = array(0 => t('Unlimited')) + drupal_map_assoc(array(86400, 172800, 345600, 604800, 1209600, 2419200, 4838400, 9676800, 31536000), "format_interval");

		  $form['inner_poll']['active'] = array(
        '#type' => 'radios',
        '#title' => t('Poll status'),
        '#weight' => 35,
        '#default_value' => isset($r->active) ? $r->active : 1,
        '#options' => $_active,
        '#description' => t('When the poll is closed, visitors can not longer vote for it.')
      );

      $form['inner_poll']['runtime'] = array(
        '#type' => 'select',
        '#title' => t('Poll duration'),
        '#weight' => 40,
        '#default_value' => isset($r->runtime) ? $r->runtime : 0,
        '#options' => $_duration,
        '#description' => t('After this period, the poll will be closed automatically.'),
      );

		}
	}
}


/**
 * Implementation of hook_perm
 */
function inner_poll_perm() {
  return array('create inner polls', 'edit inner polls', 'edit own inner poll', 'vote on inner polls', 'cancel own inner poll vote', 'inspect all inner poll votes');
}


/**
 * Implementation of hook_nodeapi
 */
function inner_poll_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
      _add_new_poll($node);
      break;
    case 'update':    //*
      _update_poll($node);
    	break;
    case 'view':
		  $node->content['pollform'] = theme('inner_poll_vote_form', $node, $op, $a3, $a4, '');
		  $node->content['pollform']['#weight'] = 99;
		  //$node->content['pollform']['#value'] = "<div class=\"inner_poll\" id=\"inner_poll_" . $node->nid . "\">" . $node->content['pollform']['#value'] . "</div>";
      break;//*/
    case 'load':
    	$q = db_query("SELECT * FROM {inner_poll_choices} WHERE nid = %d", $node->nid);
    	$counter = 0;
    	$choice = array();
    	$choice[0] = -1;
    	while($r = db_fetch_object($q)){
    		if($r->chorder != ANSWER_PROPERTY)$choice[$counter] = $r;
    		else $choice[ANSWER_PROPERTY] = $r;
    		$counter++;
    	}
      break;
    case 'delete':
      db_query("DELETE FROM {inner_poll} WHERE nid = %d", $node->nid);
      db_query("DELETE FROM {inner_poll_choices} WHERE nid = %d", $node->nid);
      db_query("DELETE FROM {inner_poll_votes} WHERE nid = %d", $node->nid);
      break;
  }
}


/**
 * Implementation of hook_form().
 */
function inner_poll_form(&$form_state, $node) {
	$r = db_fetch_object(db_query("SELECT COUNT(*) AS count FROM {inner_poll} WHERE nid = %d AND active = 1", $node->nid));
	if($r->count != 0){
		$counter = 0;
		$radios = array();
		$r = db_fetch_object(db_query("SELECT type FROM {inner_poll} WHERE nid = %d", $node->nid));
		if($r->type == 1)$type = 'checkboxes';
		else $type = 'radios';
		$q = db_query("SELECT * FROM {inner_poll_choices} WHERE nid = %d", $node->nid);
		while($r = db_fetch_object($q)){
			if($r->chorder != ANSWER_PROPERTY)	{
				$radios[$r->chorder] = $r->chtext;
			}
		}
    $form['choice'] = array(
      '#type' => $type,
      '#options' => $radios,
      '#weight' => -5,
    );
    $form['button'] = array(
    	'#type' => 'hidden',
      '#suffix' => '<input type=button onclick="javascript:vote(this.form, ' . $node->nid . ');" value=' . t('Vote!') . '>',
      '#weight' => -4,
    );

    $form['abstain'] = array(
    	'#type' => 'hidden',
      '#suffix' => '<input type=button onclick="javascript:abst(' . $node->nid . ');" value=' . t('Abstain') . '>',
      '#weight' => -3,
    );
    /*
    $form['button'] = array(
    	'#type' => 'hidden',
      '#suffix' => '<input type=button onclick="javascript:vote(document.getElementById(\'inner-poll-form\').choice, ' . $node->nid . ');" value=Vote!>',
      '#weight' => -4,
    );
    //*/

		return $form;
	}
}

function inner_poll_block_form(&$form_state, $node) {
	$r = db_fetch_object(db_query("SELECT COUNT(*) AS count FROM {inner_poll} WHERE nid = %d AND active = 1", $node->nid));
	if($r->count != 0){
		$counter = 0;
		$radios = array();
		$r = db_fetch_object(db_query("SELECT type FROM {inner_poll} WHERE nid = %d", $node->nid));
		if($r->type == 1)$type = 'checkboxes';
		else $type = 'radios';
		$q = db_query("SELECT * FROM {inner_poll_choices} WHERE nid = %d", $node->nid);
		while($r = db_fetch_object($q)){
			if($r->chorder != ANSWER_PROPERTY)	{
				$radios[$r->chorder] = $r->chtext;
			}
		}
    $form['choice'] = array(
      '#type' => $type,
      '#options' => $radios,
      '#weight' => -5,
    );
    $form['button'] = array(
    	'#type' => 'hidden',
      '#suffix' => '<input type=button onclick="javascript:vote(this.form, ' . $node->nid . ', 1);" value=' . t('Vote!') . '>',
      '#weight' => -4,
    );

    $form['abstain'] = array(
    	'#type' => 'hidden',
      '#suffix' => '<input type=button onclick="javascript:abst(' . $node->nid . ', 1);" value=' . t('Abstain') . '>',
      '#weight' => -3,
    );
    /*
    $form['button'] = array(
    	'#type' => 'hidden',
      '#suffix' => '<input type=button onclick="javascript:vote(document.getElementById(\'inner-poll-form\').choice, ' . $node->nid . ');" value=Vote!>',
      '#weight' => -4,
    );
    //*/

		return $form;
	}
}

/**
 * Implementation of hook_menu().
 */
function inner_poll_menu() {
  $items = array();

	// меню  возвращает данные для аяксовой подгрузки данных об устройствах, удовлетворяющих фильтру.
  $items['inner_poll/vote_js'] = array(
    'title' => t('inner_poll_vote_js'),
    'page callback' => 'inner_poll_vote_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['inner_poll/vote_js/block'] = array(
    'title' => t('inner_poll_vote_js'),
    'page callback' => 'inner_poll_block_vote_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['inner_poll/cancel_vote'] = array(
    'title' => t('inner_poll_cancel_vote'),
    'page callback' => 'inner_poll_cancel_vote',
    'access arguments' => array('cancel own inner poll vote'),
    'type' => MENU_CALLBACK,
  );
  
  $items['inner_poll/cancel_vote/block'] = array(
    'title' => t('inner_poll_cancel_vote_block'),
    'page callback' => 'inner_poll_cancel_vote_block',
    'access arguments' => array('cancel own inner poll vote'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/inner-poll-settings'] = array(
    'title' => 'Inner poll settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inner_poll_settings'),
    'access arguments' => array('administer site configuration')
  );

  return $items;
}


/*
 * Function for AJAX callback
 */
function inner_poll_vote_js() {
	global $user;
	$nid = check_plain($_POST['n']);

	$save_vote = FALSE;

	if($user->uid != 0) {
	  $r = db_fetch_object(db_query(" SELECT COUNT(*) count FROM {inner_poll_votes} WHERE nid = %d AND uid = %d", $nid, $user->uid));
	  if($r->count == 0) $save_vote = TRUE;
	} else {
	  $counter = 0;
	  $ip = ip_address();
	  $q = db_query(" SELECT hostname FROM {inner_poll_votes} WHERE nid = %d AND uid = %d", $nid, $user->uid);
	  while($r = db_fetch_object($q)) {
	    if($ip == $r->hostname) $counter++;
	  }
	  if($counter > 0) $save_vote = FALSE;
	  else $save_vote = TRUE;
	}

	if($save_vote){
	  if($_POST['abstain'] != 1) {
    	$v = check_plain($_POST['v']);
    	if(strstr($v, ";")) {
    	  $votes = explode(";", $v);
    	} else {
    	  $votes[0] = "";
    	  $votes[1] = $v;
    	}
  	  for($i = 1; $i <= count($votes) - 1; $i++) {
  		  db_query("INSERT INTO {inner_poll_votes} (`nid`, `uid`, `chorder`, `hostname`) VALUES (%d, %d, %d, '%s')", $nid, $user->uid, $votes[$i], ip_address());
  		  db_query("UPDATE {inner_poll_choices} SET chvotes = chvotes + 1 WHERE nid = %d AND chorder = %d", $nid, $votes[$i]);
  		}
  		$node = node_load(array('nid' => $nid));
  		$output = theme('inner_poll_vote_form', $node, $op, $a3, $a4, t('Your vote accepted'));
  		//drupal_set_message($output['#value']);
  	} else {
  	  db_query("INSERT INTO {inner_poll_votes} (`nid`, `uid`, `chorder`, `hostname`) VALUES (%d, %d, %d, '%s')", $nid, $user->uid, ANSWER_PROPERTY, ip_address());
  	  $node = node_load(array('nid' => $nid));
  		$output = theme('inner_poll_vote_form', $node, $op, $a3, $a4, t('You abstain'));
  	}
	} else{
		$output = t('You already vote on this poll');
	}

	$arr = array ('result'=> $output);
	exit (json_encode($arr));
}

function inner_poll_block_vote_js() {
	global $user;
	$nid = check_plain($_POST['n']);

	$save_vote = FALSE;

	if($user->uid != 0) {
	  $r = db_fetch_object(db_query(" SELECT COUNT(*) count FROM {inner_poll_votes} WHERE nid = %d AND uid = %d", $nid, $user->uid));
	  if($r->count == 0) $save_vote = TRUE;
	} else {
	  $counter = 0;
	  $ip = ip_address();
	  $q = db_query(" SELECT hostname FROM {inner_poll_votes} WHERE nid = %d AND uid = %d", $nid, $user->uid);
	  while($r = db_fetch_object($q)) {
	    if($ip == $r->hostname) $counter++;
	  }
	  if($counter > 0) $save_vote = FALSE;
	  else $save_vote = TRUE;
	}

	if($save_vote){
	  if($_POST['abstain'] != 1) {
    	$v = check_plain($_POST['v']);
    	if(strstr($v, ";")) {
    	  $votes = explode(";", $v);
    	} else {
    	  $votes[0] = "";
    	  $votes[1] = $v;
    	}
  	  for($i = 1; $i <= count($votes) - 1; $i++) {
  		  db_query("INSERT INTO {inner_poll_votes} (`nid`, `uid`, `chorder`, `hostname`) VALUES (%d, %d, %d, '%s')", $nid, $user->uid, $votes[$i], ip_address());
  		  db_query("UPDATE {inner_poll_choices} SET chvotes = chvotes + 1 WHERE nid = %d AND chorder = %d", $nid, $votes[$i]);
  		}
  		$node = node_load(array('nid' => $nid));
  		$output = theme('inner_poll_vote_block_form', $node, $op, $a3, $a4, t('Your vote accepted'));
  		//drupal_set_message($output['#value']);
  	} else {
  	  db_query("INSERT INTO {inner_poll_votes} (`nid`, `uid`, `chorder`, `hostname`) VALUES (%d, %d, %d, '%s')", $nid, $user->uid, ANSWER_PROPERTY, ip_address());
  	  $node = node_load(array('nid' => $nid));
  		$output = theme('inner_poll_vote_block_form', $node, $op, $a3, $a4, t('You abstain'));
  	}
	} else{
		$output = t('You already vote on this poll');
	}

	$arr = array ('result'=> $output);
	exit (json_encode($arr));
}

/**
 * Admin interface
 */
function inner_poll_settings() {
  $options = array();
  foreach(node_get_types() as $k => $v) {
    $options[$k] = $k;
  }
  $values = variable_get('inner_poll_content_types', array());
  // Content types for inner_poll
  $form['inner_poll_content_types'] = array('#type' => 'checkboxes',
    '#title' => t('Select node types'),
    '#default_value' => $values,
    '#options' => $options,
  );

  // width of div which contain poll form
  $form['inner_poll_div_width'] = array('#type' => 'textfield',
    '#title' => t('div width'),
    '#default_value' => variable_get('inner_poll_div_width', 300),
    '#maxlength' => 3,
    '#required' => TRUE,
  );

  $form['inner_poll_block_div_width'] = array('#type' => 'textfield',
    '#title' => t('block div width'),
    '#default_value' => variable_get('inner_poll_block_div_width', 100),
    '#maxlength' => 3,
    '#required' => TRUE,
  );  
  
  // round results
  $form['inner_poll_round'] = array('#type' => 'textfield',
    '#title' => t('round results'),
    '#default_value' => variable_get('inner_poll_round', 1),
    '#maxlength' => 1,
    '#required' => TRUE,
  );

  // minimum question length
  $form['inner_poll_question_length'] = array('#type' => 'textfield',
    '#title' => t('Minimum question length'),
    '#default_value' => variable_get('inner_poll_question_length', 1),
    '#maxlength' => 3,
    '#required' => TRUE,
  );

  // show polls in teasers?
  $form['inner_poll_in_teaser'] = array('#type' => 'checkbox',
    '#title' => t('Show polls in teasers'),
    '#default_value' => variable_get('inner_poll_in_teaser', FALSE),
  );

  return system_settings_form($form);
}


function _add_new_poll($node) {
  if (user_access('create inner polls')) {
  	$choices = array();
  	$counter = 0;
  	$question = trim(check_plain($_POST['question']));
  	if(strlen($question) >= variable_get('inner_poll_question_length', 1))$counter++;
  	else if(strlen($question) != 0){
  		form_set_error("question", "if you want to create poll you must type minimum 6 simbols in quiestion field. Poll dont save. Edit your node, to create poll.");
  		exit();
  	}
  	/*
    for($i = 0; $i <= 9; $i++){
    	$choices[$i] = trim(check_plain($_POST['choice_' . $i]));
    	if(strlen($choices[$i]) >= 1)$counter++;
    }
    //*/
    foreach($_POST as $k => $v) {
      if(strstr($k, "choice_")) {
        $val = trim(check_plain($v));
        if(strlen($val) > 0) {
          $counter++;
          $choices[] = $val;
        }
      }
    }

    if($counter != 0){
	    if($counter < 2 || strlen($question) < variable_get('inner_poll_question_length', 1)){
	    	form_set_error("question", "if you want to create poll you must enter question and minimum to choices. " . $counter);
	    	exit();
	    } else{
	    	$type = 0;
	    	if($_POST['multi'])$type = 1;
	    	$cancel = 0;
	    	if($_POST['cancel'])$cancel = 1;
	    	$active = 1;
	    	if(!$_POST['active'])$active = 0;
	    	db_query("INSERT INTO {inner_poll} (`nid`, `runtime`, `active`, `type`, `cancel`) VALUES (%d, %d, %d, %d, %d)", $node->nid, $_POST['runtime'], $active, $type, $cancel);
	    	for($i = 0; $i <= count($choices) - 1; $i++){
    			db_query("INSERT INTO {inner_poll_choices} (`nid`, `chtext`, `chvotes`, `chorder`) VALUES (%d, '%s', %d, %d)", $node->nid, $choices[$i], 0, $i);
	    	}
	    	db_query("INSERT INTO {inner_poll_choices} (`nid`, `chtext`, `chvotes`, `chorder`) VALUES (%d, '%s', %d, %d)", $node->nid, $question, 0, ANSWER_PROPERTY);
	    }
	   }
  }
  elseif ($node->moderate) {
    drupal_set_message(t('The post is queued for approval. The editors will decide whether it should be published.'));
  }
}


function _update_poll($node) {
  global $user;
  if(user_access('edit inner polls') || $node->uid == $user->uid && user_access('edit own inner poll')){
  	$type = 0;
	  if($_POST['multi'])$type = 1;
	  $cancel = 0;
	  if($_POST['cancel'])$cancel = 1;
	  $active = 1;
	  if(!$_POST['active'])$active = 0;

	  db_query("UPDATE {inner_poll} SET type = %d, cancel = %d, active = %d, runtime = %d WHERE nid = %d", $type, $cancel, $active, $_POST['runtime'], $node->nid);

		$choices = array();
  	$counter = 0;
  	$question = trim(check_plain($_POST['question']));
  	if(strlen($question) >= variable_get('inner_poll_question_length', 1))$counter++;
  	/*
  	for($i = 0; $i <= 9; $i++){
	  	$choices[$i] = trim(check_plain($_POST['choice_' . $i]));
	  	if(strlen($choices[$i]) >= 1)$counter++;
	  }
	  //*/
	  foreach($_POST as $k => $v) {
      if(strstr($k, "choice_")) {
        $counter++;
        $choices[] = trim(check_plain($v));
      }
    }
	  if(($counter > 0 && $counter < 2) || strlen($question) < variable_get('inner_poll_question_length', 1)){
	  	//form_set_error("question", "if you want to create poll you must enter question and minimum to choices. " . $counter);
	  } else{
	  	for($i = 0; $i <= count($choices) - 1; $i++){
	  		if(strlen($choices[$i]) > 0){
	  			$r = db_fetch_object(db_query("SELECT COUNT(*) AS count FROM {inner_poll_choices} WHERE `chorder` = %d AND `nid` = %d", $i, $node->nid));
	  			if($r->count == 0){
	  				 db_query("INSERT INTO {inner_poll_choices} (`nid`, `chtext`, `chvotes`, `chorder`) VALUES (%d, '%s', %d, %d)", $node->nid, $choices[$i], 0, $i);
	  			}	else {
	  				db_query("UPDATE {inner_poll_choices}  SET `chtext` = '%s' WHERE `nid` = %d AND `chorder` = %d", $choices[$i], $node->nid, $i);
	  			}
	  		} else {
	  			db_query("DELETE FROM {inner_poll_choices} WHERE `nid` = %d AND `chorder` = %d", $node->nid, $i);
	  		}
	  	}

	  	$r = db_fetch_object(db_query("SELECT COUNT(*) AS count FROM {inner_poll_choices} WHERE `chorder` = %d AND `nid` = %d", ANSWER_PROPERTY, $node->nid));
	  	if($r->count == 0){
	  		 db_query("INSERT INTO {inner_poll_choices} (`nid`, `chtext`, `chvotes`, `chorder`) VALUES (%d, '%s', %d, %d)", $node->nid, $question, 0, ANSWER_PROPERTY);
	  	}	else {
	  		db_query("UPDATE {inner_poll_choices}  SET `chtext` = '%s' WHERE `nid` = %d AND `chorder` = %d", $question, $node->nid, ANSWER_PROPERTY);
	  	}

	  	$r = db_fetch_object(db_query("SELECT COUNT(*) AS count FROM {inner_poll_choices} WHERE `chorder` = %d AND `nid` = %d", ANSWER_PROPERTY, $node->nid));
	  	if($r->count != 0){
	  		db_query("UPDATE {inner_poll_choices}  SET `chtext` = '%s' WHERE `nid` = %d AND `chorder` = %d", $question, $node->nid, ANSWER_PROPERTY);
	    	$r1 = db_fetch_object(db_query("SELECT COUNT(*) AS count FROM {inner_poll} WHERE `nid` = %d", $node->nid));
	    	if($r1->count == 0)db_query("INSERT INTO {inner_poll} (`nid`, `runtime`, `active`, `type`) VALUES (%d, %d, %d, %d)", $node->nid, 0, 1, $type);
	  	}
	  	else db_query("INSERT INTO {inner_poll_choices} (`nid`, `chtext`, `chvotes`, `chorder`) VALUES (%d, '%s', %d, %d)", $node->nid, $question, 0, ANSWER_PROPERTY);
	  }
  }
}

/**
 * Implementation of hook_theme()
 */
function inner_poll_theme() {
  return array(
    'inner_poll_vote_form' => array(
      'arguments' => array('node' => NULL, 'op' => NULL, 'a3' => NULL, 'a4' => NULL, 'message' => NULL),
    ),
    'inner_poll_vote_block_form' => array(
      'arguments' => array('node' => NULL, 'op' => NULL, 'a3' => NULL, 'a4' => NULL, 'message' => NULL),
    ),
  );
}

/**
 * hook_theme() realization.
 *
 * @return html, vote form for document body
 */
function theme_inner_poll_vote_form($node, $op, $a3, $a4, $message) {
   global $user;
   $r = db_fetch_object(db_query("SELECT COUNT(*) AS count FROM {inner_poll} WHERE nid = %d", $node->nid));
   if(strlen($message) > 0) $message = "<div class=\"messages status\">" . $message. "</div>";
   if(($r->count >= 1 && $a3 != 1) || ($r->count >= 1 && variable_get('inner_poll_in_teaser', FALSE))){
	 	if(user_access('vote on inner polls')){
	 	    $path = drupal_get_path('module', 'inner_poll');
	  		drupal_add_js($path . '/vote.js');
	  		drupal_add_js(array('sPath' => $_SERVER['HTTP_HOST']), 'setting');
		  	drupal_add_css($path . '/inner_poll.css');

		  	// check vote user on this poll or not
		  	$user_already_vote = FALSE;
		  	if($user->uid != 0) $r = db_fetch_object(db_query("SELECT COUNT(*) AS count FROM {inner_poll_votes} WHERE nid = %d AND uid = %d", $node->nid, $user->uid));
		  	else $r = db_fetch_object(db_query("SELECT COUNT(*) AS count FROM {inner_poll_votes} WHERE nid = %d AND hostname = '%s'", $node->nid, ip_address()));
		  	if($r->count != 0){
		  	  $user_already_vote = TRUE;
			  }

			 	$act = db_fetch_object(db_query("SELECT active AS act FROM {inner_poll} WHERE nid = %d", $node->nid));
			 	// question
			  $x = db_fetch_object(db_query("SELECT chtext FROM {inner_poll_choices} WHERE chorder = %d AND nid = %d", ANSWER_PROPERTY, $node->nid));


		  	if(!$user_already_vote && $act->act) {
		  	  // user not vote, show form
		  	  $output = array(
		      	'#value' => "<div class=\"inner_poll\" id=\"inner_poll_" . $node->nid . "\">" . $message . "<br><h2>" . t('Attached poll') . ' "' . $x->chtext . '"</h2><div id="poll_form_' . $node->nid . '">' . drupal_get_form('inner_poll_form', $node) . "</div></div>",
		        '#weight' => 10,
			    );
		  	} else {
		  	  // user vote, show results

		  	  // current user answers
		  	  if($user->uid != 0)	$r = db_query("SELECT c.chtext, v.chorder FROM {inner_poll_choices} c INNER JOIN {inner_poll_votes} v ON v.nid = c.nid WHERE v.nid = %d AND v.uid = %d AND v.chorder = c.chorder", $node->nid, $user->uid);
		  	  else	$r = db_query("SELECT c.chtext, c.chorder FROM {inner_poll_choices} c INNER JOIN {inner_poll_votes} v ON v.nid = c.nid WHERE v.nid = %d AND v.hostname = '%s' AND v.chorder = c.chorder", $node->nid, ip_address());
			  	$user_votes = array();
			  	while($rr = db_fetch_object($r)) {
			  	  if($rr->chorder != ANSWER_PROPERTY) $user_votes[] = $rr->chtext;
			  	  else $user_votes[] = t('You abstain');
			  	}

			  	// answers
			  	$q = db_query("SELECT * FROM {inner_poll_choices} WHERE chorder <> %d AND nid = %d", ANSWER_PROPERTY, $node->nid);
			  	$width = variable_get('inner_poll_div_width', 300);
			  	if(!is_numeric($width))$width = 300;

			  	$results = array();
			  	$i = 0;
			  	$sum = 0;
			  	$max = array();
			  	while($z = db_fetch_object($q)){
			  	  $sum += $z->chvotes;
			  	  $results[$i]['text'] = $z->chtext;
			  	  $results[$i]['votes'] = $z->chvotes;
			  	  if($i == 0) {
			  	    $max[] = $i;
			  	  } else if($results[$i]['votes'] > $results[$i - 1]['votes']) {
			  	    $max = array();
			  	    $max[] = $i;
			  	  } else if($results[$i]['votes'] == $results[$i - 1]['votes']) {
			  	    $max[] = $i;
			  	  }
			  	  $i++;
			  	}

			  	$res = "<div class=\"inner_poll_container\">";
			  	for($i = 0; $i <= count($results) - 1; $i++) {
  			  	if($sum != 0) {
  			  	  $w = ($width * $results[$i]['votes'] / $sum);
  			  	  $percent = round(($results[$i]['votes'] / $sum) * 100, variable_get('inner_poll_round', 1));
  			  	}	else {
  			  	  $w = 1;
  			  	  $percent = 0;
  			  	}
            $res .= "<div class=\"inner_poll_line\"><div class=\"inner_poll_result\"><div class=\"percent\">" . $percent . "%</div><div class=\"points\">(" . $results[$i]['votes'] . ")</div></div><div class=\"inner_poll_answer_wrapper\"><div class=\"inner_poll_answer\">" . $results[$i]['text'] . "</div><div class=\"inner_poll_grafic" . (in_array($i, $max) ? " inner_poll_max_result" : "") . "\" style=\"width: " . $w . "px\"></div></div></div><div style=\"clear: both;\"></div>\n";
			  	}
			  	$res .= "</div>";

			  	$c = db_fetch_object(db_query("SELECT cancel FROM {inner_poll} WHERE nid = %d", $node->nid));
			  	$cancel_link = "";
			  	if($c->cancel == 1 && user_access('cancel own inner poll vote') && $act->act == 1) {
			  	  $cancel_link = "<br><a href=\"javascript:{}\" class=\"cancel_link\" onclick=\"javascript:cancel_vote(" . $node->nid . ");\">" . t('Cancel vote') . "</a>";
			  	}

			  	if($act->act)$text = t('You are already voted this poll, your answer is: ') . implode(", ", $user_votes);
			  	else $text = t('This poll is closed');

			  	$output = array(
		      	'#value' => "<div class=\"inner_poll\" id=\"inner_poll_" . $node->nid . "\">" . $message . "<br><h2>" . t('Attached poll') . " \"" . $x->chtext . "\"</h2><div class=\"already_vote\">" . $text . "</div><div class=\"results\">" . t('Results') . ":</div>" . $res . "<div class=\"total_votes\">" . t('All votes') . ": " . $sum . $cancel_link . "</div></div>",
			    );
		  	}
			}else{
				$x = db_fetch_object(db_query("SELECT chtext FROM {inner_poll_choices} WHERE chorder = %d AND nid = %d", ANSWER_PROPERTY, $node->nid));
			  $q = db_query("SELECT * FROM {inner_poll_choices} WHERE chorder <> %d AND nid = %d", ANSWER_PROPERTY, $node->nid);
			  $res = "";
			  while($z = db_fetch_object($q)){
			  	$res .= $z->chtext . ": " . t('%votes', array('%votes' => format_plural($z->chvotes, '1 vote', '@count votes'))). "<br>\n";
			  }
			  $output = array(
		     	'#value' => t('Attached poll "') . $x->chtext . '".<br>'. t('Register or login to poll'). '<br>'. t('Results:'). '<br>' . $res,
			  );
			}
		}
  return $output;
}

/**
 * hook_theme() realization.
 *
 * @return html, vote form for block
 */
function theme_inner_poll_vote_block_form($node, $op, $a3, $a4, $message) {
   global $user;
   $r = db_fetch_object(db_query("SELECT COUNT(*) AS count FROM {inner_poll} WHERE nid = %d", $node->nid));
   if(strlen($message) > 0) $message = "<div class=\"messages status\">" . $message. "</div>";
   if(($r->count >= 1)){
	 	if(user_access('vote on inner polls')) {
	 	    $path = drupal_get_path('module', 'inner_poll');
	  		drupal_add_js($path . '/vote.js');
	  		drupal_add_js(array('sPath' => $_SERVER['HTTP_HOST']), 'setting');
		  	drupal_add_css($path . '/inner_poll.css');

		  	// check vote user on this poll or not
		  	$user_already_vote = FALSE;
		  	if($user->uid != 0) $r = db_fetch_object(db_query("SELECT COUNT(*) AS count FROM {inner_poll_votes} WHERE nid = %d AND uid = %d", $node->nid, $user->uid));
		  	else $r = db_fetch_object(db_query("SELECT COUNT(*) AS count FROM {inner_poll_votes} WHERE nid = %d AND hostname = '%s'", $node->nid, ip_address()));
		  	if($r->count != 0){
		  	  $user_already_vote = TRUE;
			  }

			 	$act = db_fetch_object(db_query("SELECT active AS act FROM {inner_poll} WHERE nid = %d", $node->nid));
			 	// question
			  $x = db_fetch_object(db_query("SELECT chtext FROM {inner_poll_choices} WHERE chorder = %d AND nid = %d", ANSWER_PROPERTY, $node->nid));


		  	if(!$user_already_vote && $act->act) {
		  	  // user not vote, show form
		  	  $output = array(
		      	'#value' => "<div class=\"inner_poll\" id=\"inner_poll_block_" . $node->nid . "\">" . $message . "<h3><a href=\"" . base_path() . drupal_get_path_alias("node/" . $node->nid) . "\">" . $x->chtext . "</a></h3><div id=\"poll_form_block_" . $node->nid . "\">" . drupal_get_form('inner_poll_block_form', $node) . "</div></div>",
		        '#weight' => 10,
			    );
		  	} else {
		  	  // user vote, show results

		  	  // current user answers
		  	  if($user->uid != 0)	$r = db_query("SELECT c.chtext, v.chorder FROM {inner_poll_choices} c INNER JOIN {inner_poll_votes} v ON v.nid = c.nid WHERE v.nid = %d AND v.uid = %d AND v.chorder = c.chorder", $node->nid, $user->uid);
		  	  else	$r = db_query("SELECT c.chtext, c.chorder FROM {inner_poll_choices} c INNER JOIN {inner_poll_votes} v ON v.nid = c.nid WHERE v.nid = %d AND v.hostname = '%s' AND v.chorder = c.chorder", $node->nid, ip_address());
			  	$user_votes = array();
			  	while($rr = db_fetch_object($r)) {
			  	  if($rr->chorder != ANSWER_PROPERTY) $user_votes[] = $rr->chtext;
			  	  else $user_votes[] = t('You abstain');
			  	}

			  	// answers
			  	$q = db_query("SELECT * FROM {inner_poll_choices} WHERE chorder <> %d AND nid = %d", ANSWER_PROPERTY, $node->nid);
			  	$width = variable_get('inner_poll_block_div_width', 100);
			  	if(!is_numeric($width))$width = 100;

			  	$results = array();
			  	$i = 0;
			  	$sum = 0;
			  	$max = array();
			  	while($z = db_fetch_object($q)){
			  	  $sum += $z->chvotes;
			  	  $results[$i]['text'] = $z->chtext;
			  	  $results[$i]['votes'] = $z->chvotes;
			  	  if($i == 0) {
			  	    $max[] = $i;
			  	  } else if($results[$i]['votes'] > $results[$i - 1]['votes']) {
			  	    $max = array();
			  	    $max[] = $i;
			  	  } else if($results[$i]['votes'] == $results[$i - 1]['votes']) {
			  	    $max[] = $i;
			  	  }
			  	  $i++;
			  	}

			  	$res = "<div class=\"inner_poll_block_container\">";
			  	for($i = 0; $i <= count($results) - 1; $i++) {
  			  	if($sum != 0) {
  			  	  $w = ($width * $results[$i]['votes'] / $sum);
  			  	  $percent = round(($results[$i]['votes'] / $sum) * 100, variable_get('inner_poll_round', 1));
  			  	}	else {
  			  	  $w = 1;
  			  	  $percent = 0;
  			  	}
            $res .= "<div class=\"inner_poll_line\"><div class=\"inner_poll_answer_wrapper\"><div class=\"inner_poll_answer\">" . $results[$i]['text'] . "</div><div class=\"inner_poll_block_result\"><div class=\"percent\">" . $percent . "%</div><div class=\"points\">(" . $results[$i]['votes'] . ")</div><div class=\"inner_poll_grafic" . (in_array($i, $max) ? " inner_poll_max_result" : "") . "\" style=\"width: " . $w . "px\"></div></div></div></div><div style=\"clear: both;\"></div><br>\n";
			  	}
			  	$res .= "</div>";

			  	$c = db_fetch_object(db_query("SELECT cancel FROM {inner_poll} WHERE nid = %d", $node->nid));
			  	$cancel_link = "";
			  	if($c->cancel == 1 && user_access('cancel own inner poll vote') && $act->act == 1) {
			  	  $cancel_link = "<br><a href=\"javascript:{}\" class=\"cancel_link\" onclick=\"javascript:cancel_vote(" . $node->nid . ", 1);\">" . t('Cancel vote') . "</a>";
			  	}

			  	if(!$act->act) $text = t('This poll is closed');

			  	$output = array(
		      	'#value' => "<div class=\"inner_poll\" id=\"inner_poll_block_" . $node->nid . "\">" . $message . "<h3>" . $x->chtext . "</h3><div class=\"already_vote\">" . $text . "</div><div class=\"results\">" . t('Results') . ":</div>" . $res . "<div class=\"total_votes\">" . t('All votes') . ": " . $sum . $cancel_link . "</div></div>",
			    );
		  	}
			}else{
				$x = db_fetch_object(db_query("SELECT chtext FROM {inner_poll_choices} WHERE chorder = %d AND nid = %d", ANSWER_PROPERTY, $node->nid));
			  $q = db_query("SELECT * FROM {inner_poll_choices} WHERE chorder <> %d AND nid = %d", ANSWER_PROPERTY, $node->nid);
			  $res = "";
			  while($z = db_fetch_object($q)){
			  	$res .= $z->chtext . ": " . t('%votes', array('%votes' => format_plural($z->chvotes, '1 vote', '@count votes'))). "<br>\n";
			  }
			  $output = array(
		     	'#value' => $x->chtext . '".<br>'. t('Register or login to poll'). '<br>'. t('Results:'). '<br>' . $res,
			  );
			}
		}
  return $output;
}

/**
 * AJAX callback for cancel vote
 */
function inner_poll_cancel_vote() {
  $output = "err";
  $nid = (int)check_plain($_POST['n']);
  $act = db_fetch_object(db_query("SELECT active AS act FROM {inner_poll} WHERE nid = %d", $node->nid));

  if(user_access('cancel own inner poll vote') && $act->act = 1) {
    global $user;
    if($user->uid != 0) {
      $q = db_query("SELECT chorder FROM {inner_poll_votes} WHERE nid = %d AND uid = %d", $nid, $user->uid);
      while($r = db_fetch_object($q)) {
        db_query("UPDATE {inner_poll_choices} SET chvotes = chvotes - 1 WHERE nid = %d AND chorder = %d", $nid, $r->chorder);
      }
      db_query("DELETE FROM {inner_poll_votes} WHERE nid = %d AND uid = %d", $nid, $user->uid);
    } else {
      $ip = ip_address();
      $q = db_query("SELECT chorder FROM {inner_poll_votes} WHERE nid = %d AND uid = %d AND hostname = '%s'", $nid, $user->uid, $ip);
      while($r = db_fetch_object($q)) {
        db_query("UPDATE {inner_poll_choices} SET chvotes = chvotes - 1 WHERE nid = %d AND chorder = %d", $nid, $r->chorder);
      }
      db_query("DELETE FROM {inner_poll_votes} WHERE nid = %d AND uid = %d AND hostname = '%s'", $nid, $user->uid, $ip);
    }


    $node = node_load(array('nid' => $nid));
  	$output = theme('inner_poll_vote_form', $node, $op, $a3, $a4, t('Your vote was deleted'));

  }
  $arr = array ('result'=> $output);
	exit (json_encode($arr));
}

function inner_poll_cancel_vote_block() {
  $output = "err";
  $nid = (int)check_plain($_POST['n']);
  $act = db_fetch_object(db_query("SELECT active AS act FROM {inner_poll} WHERE nid = %d", $node->nid));

  if(user_access('cancel own inner poll vote') && $act->act = 1) {
    global $user;
    if($user->uid != 0) {
      $q = db_query("SELECT chorder FROM {inner_poll_votes} WHERE nid = %d AND uid = %d", $nid, $user->uid);
      while($r = db_fetch_object($q)) {
        db_query("UPDATE {inner_poll_choices} SET chvotes = chvotes - 1 WHERE nid = %d AND chorder = %d", $nid, $r->chorder);
      }
      db_query("DELETE FROM {inner_poll_votes} WHERE nid = %d AND uid = %d", $nid, $user->uid);
    } else {
      $ip = ip_address();
      $q = db_query("SELECT chorder FROM {inner_poll_votes} WHERE nid = %d AND uid = %d AND hostname = '%s'", $nid, $user->uid, $ip);
      while($r = db_fetch_object($q)) {
        db_query("UPDATE {inner_poll_choices} SET chvotes = chvotes - 1 WHERE nid = %d AND chorder = %d", $nid, $r->chorder);
      }
      db_query("DELETE FROM {inner_poll_votes} WHERE nid = %d AND uid = %d AND hostname = '%s'", $nid, $user->uid, $ip);
    }


    $node = node_load(array('nid' => $nid));
  	$output = theme('inner_poll_vote_block_form', $node, $op, $a3, $a4, t('Your vote was deleted'));

  }
  $arr = array ('result'=> $output);
	exit (json_encode($arr));
}

/**
 * Implementation of hook_cron().
 *
 * Closes polls that have exceeded their allowed runtime.
 */
function inner_poll_cron() {
  $result = db_query('SELECT p.nid FROM {inner_poll} p INNER JOIN {node} n ON p.nid = n.nid WHERE (n.created + p.runtime) < '. time() .' AND p.active = 1 AND p.runtime != 0');
  while ($poll = db_fetch_object($result)) {
    db_query("UPDATE {inner_poll} SET active = 0 WHERE nid = %d", $poll->nid);
  }
}

/**
 * Implementation of hook_block().
 *
 */

function inner_poll_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array('info' => t('Last poll'),
      'weight' => 0, 'status' => 1, 'region' => 'left');
    return $blocks;
  }
  else if ($op == 'view') {
    switch($delta) {
      case 0:
        $block = array('subject' => t('Last poll'),
          'content' => last_poll_block());
        break;
    }
    return $block;
  }
}

function last_poll_block() {
   global $user;
   $node = db_fetch_object(db_query("SELECT nid FROM {inner_poll} ORDER BY nid DESC LIMIT 0,1"));
   $r = db_fetch_object(db_query("SELECT COUNT(*) AS count FROM {inner_poll} WHERE nid = %d", $node->nid));
   //drupal_set_message($r->count);   
   if(strlen($message) > 0) $message = "<div class=\"messages status\">" . $message. "</div>";
   if($r->count >= 1){
	 	if(user_access('vote on inner polls')){
	 	    $path = drupal_get_path('module', 'inner_poll');
	  		drupal_add_js($path . '/vote.js');
	  		drupal_add_js(array('sPath' => $_SERVER['HTTP_HOST']), 'setting');
		  	drupal_add_css($path . '/inner_poll.css');

		  	// check vote user on this poll or not
		  	$user_already_vote = FALSE;
		  	if($user->uid != 0) $r = db_fetch_object(db_query("SELECT COUNT(*) AS count FROM {inner_poll_votes} WHERE nid = %d AND uid = %d", $node->nid, $user->uid));
		  	else $r = db_fetch_object(db_query("SELECT COUNT(*) AS count FROM {inner_poll_votes} WHERE nid = %d AND hostname = '%s'", $node->nid, ip_address()));
		  	if($r->count != 0){
		  	  $user_already_vote = TRUE;
			  }

			 	$act = db_fetch_object(db_query("SELECT active AS act FROM {inner_poll} WHERE nid = %d", $node->nid));
			 	// question
			  $x = db_fetch_object(db_query("SELECT chtext FROM {inner_poll_choices} WHERE chorder = %d AND nid = %d", ANSWER_PROPERTY, $node->nid));


		  	if(!$user_already_vote && $act->act) {
		  	  // user not vote, show form
		  	  $output = "<div class=\"inner_poll_block\" id=\"inner_poll_block_" . $node->nid . "\">" . $message . "<h3><a href=\"" . base_path() . drupal_get_path_alias("node/" . $node->nid) . "\">" . $x->chtext . "</a></h3><div id=\"poll_form_" . $node_nid . "\">" . drupal_get_form('inner_poll_block_form', $node) . "</div></div>";
		  	} else {
		  	  // user vote, show results

		  	  // current user answers
		  	  if($user->uid != 0)	$r = db_query("SELECT c.chtext, v.chorder FROM {inner_poll_choices} c INNER JOIN {inner_poll_votes} v ON v.nid = c.nid WHERE v.nid = %d AND v.uid = %d AND v.chorder = c.chorder", $node->nid, $user->uid);
		  	  else	$r = db_query("SELECT c.chtext, c.chorder FROM {inner_poll_choices} c INNER JOIN {inner_poll_votes} v ON v.nid = c.nid WHERE v.nid = %d AND v.hostname = '%s' AND v.chorder = c.chorder", $node->nid, ip_address());
			  	$user_votes = array();
			  	while($rr = db_fetch_object($r)) {
			  	  if($rr->chorder != ANSWER_PROPERTY) $user_votes[] = $rr->chtext;
			  	  else $user_votes[] = t('You abstain');
			  	}

			  	// answers
			  	$q = db_query("SELECT * FROM {inner_poll_choices} WHERE chorder <> %d AND nid = %d", ANSWER_PROPERTY, $node->nid);
			  	
			  	$results = array();
			  	$i = 0;
			  	$sum = 0;
			  	$max = array();
			  	while($z = db_fetch_object($q)){
			  	  $sum += $z->chvotes;
			  	  $results[$i]['text'] = $z->chtext;
			  	  $results[$i]['votes'] = $z->chvotes;
			  	  if($i == 0) {
			  	    $max[] = $i;
			  	  } else if($results[$i]['votes'] > $results[$i - 1]['votes']) {
			  	    $max = array();
			  	    $max[] = $i;
			  	  } else if($results[$i]['votes'] == $results[$i - 1]['votes']) {
			  	    $max[] = $i;
			  	  }
			  	  $i++;
			  	}

          $width = variable_get('inner_poll_block_div_width', 100);
          if(!is_numeric($width))$width = 100;
          
			  	$res = "<div class=\"inner_poll_block_container\">";
			  	for($i = 0; $i <= count($results) - 1; $i++) {
  			  	if($sum != 0) {
  			  	  $w = ($width * $results[$i]['votes'] / $sum);
  			  	  $percent = round(($results[$i]['votes'] / $sum) * 100, variable_get('inner_poll_round', 1));
  			  	}	else {
  			  	  $w = 1;
  			  	  $percent = 0;
  			  	}
            $res .= "<div class=\"inner_poll_line\"><div class=\"inner_poll_answer_wrapper\"><div class=\"inner_poll_answer\">" . $results[$i]['text'] . "</div><div class=\"inner_poll_block_result\"><div class=\"percent\">" . $percent . "%</div><div class=\"points\">(" . $results[$i]['votes'] . ")</div><div class=\"inner_poll_grafic" . (in_array($i, $max) ? " inner_poll_max_result" : "") . "\" style=\"width: " . $w . "px\"></div></div></div></div><div style=\"clear: both;\"></div><br>\n";
			  	}
			  	$res .= "</div>";

			  	$c = db_fetch_object(db_query("SELECT cancel FROM {inner_poll} WHERE nid = %d", $node->nid));
			  	$cancel_link = "";
			  	if($c->cancel == 1 && user_access('cancel own inner poll vote') && $act->act == 1) {
			  	  $cancel_link = "<br><a href=\"javascript:{}\" class=\"cancel_link\" onclick=\"javascript:cancel_vote(" . $node->nid . ", 1);\">" . t('Cancel vote') . "</a>";
			  	}

			  	if(!$act->act) $text = t('This poll is closed');

			  	$output = "<div class=\"inner_poll\" id=\"inner_poll_block_" . $node->nid . "\">" . $message . "<h3><a href=\"" . base_path() . drupal_get_path_alias("node/" . $node->nid) . "\">" . $x->chtext . "</a></h3><div class=\"already_vote\">" . $text . "</div><div class=\"results\">" . t('Results') . ":</div>" . $res . "<div class=\"total_votes\">" . t('All votes') . ": " . $sum . $cancel_link . "</div></div>";
		  	}
			}else{
				$x = db_fetch_object(db_query("SELECT chtext FROM {inner_poll_choices} WHERE chorder = %d AND nid = %d", ANSWER_PROPERTY, $node->nid));
			  $q = db_query("SELECT * FROM {inner_poll_choices} WHERE chorder <> %d AND nid = %d", ANSWER_PROPERTY, $node->nid);
			  $res = "";
			  while($z = db_fetch_object($q)){
			  	$res .= $z->chtext . ": " . t('%votes', array('%votes' => format_plural($z->chvotes, '1 vote', '@count votes'))). "<br>\n";
			  }
			  $output = $x->chtext . '".<br>'. t('Register or login to poll'). '<br>'. t('Results:'). '<br>' . $res;
			}
		}
  return $output;
}
