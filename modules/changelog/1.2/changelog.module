<?php

/**
 * @file Changelog for site changes. Written for drupal.ru.
 * @author Axel <axel@drupal.ru>, some additions by Andypost <apostnikov@gmail.com>
 * @li GPL v2
 */

/**
 * Implementation of hook_menu()
 *
 * @return array
 */
function changelog_menu() {

  $items = array();

  $items['changelog'] = array(
    'title' => 'Site changelog',
    'page callback' => 'changelog_page',
    'access arguments' => array('access content'),
    'weight' => 1,
    'type' => MENU_CALLBACK,
  );

  $items['tracker/changelog'] = array(
    'title' => 'Changelog entries',
    'access arguments' => array('access content'),
    'page callback' => 'changelog_page',
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );

  $items['changelog/feed'] = array(
    'title' => 'Changelog',
    'page callback' => 'changelog_feed',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;

}


/**
 * Implementation of hook_node_info()
 */
function changelog_node_info() {
  return array(
    'changes' => array(
      'name' => t('Changelog'),
      'module' => 'changelog',
      'description' => 'Add entry to the site changelog.',
      'has_title' => FALSE,
      'has_body' => TRUE,
      'body_label' => 'Text',
      'promote' => FALSE,
      'locked' => TRUE
    ),
  );
}


/**
 * Implementation of hook_perm().
 */
function changelog_perm() {
  return array('create changelog entries', 'delete own changelog entries', 'delete any changelog entry', 'edit own changelog entries', 'edit any changelog entry');
}


/**
 * Implementation of hook_access().
 */
function changelog_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      // Anonymous users cannot post even if they have the permission.
      return user_access('create changelog entries', $account) && $account->uid ? TRUE : NULL;
    case 'update':
      return user_access('edit any changelog entry', $account) || (user_access('edit own changelog entries', $account) && ($node->uid == $account->uid)) ? TRUE : NULL;
    case 'delete':
      return user_access('delete any changelog entry', $account) || (user_access('delete own changelog entries', $account) && ($node->uid == $account->uid)) ? TRUE : NULL;
  }
}


function changelog_form(&$node) {
  $type = node_get_types('type', $node);

  if ($type->has_body) {
    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
    $form['body_field']['body']['#rows'] = 25;
  }

  return $form;
}


/**
 * Display page with changelog records.
 */
function changelog_page() {
  $result = db_query("SELECT n.*, r.body, r.format, u.name AS author FROM {node} n INNER JOIN {node_revisions} r ON n.vid = r.vid INNER JOIN {users} u ON n.uid = u.uid WHERE n.type = 'changes' AND n.status = 1 ORDER BY n.sticky DESC, n.created DESC" );
  $output = '';

  while ($record = db_fetch_object($result)) {
    $output .= theme('changelog_record', $record);
  }

  if (!empty($output)) {
    $output .= theme('pager', NULL, variable_get('changelog_default_records', 100));
  }
  else {
    drupal_set_message(t('Changelog is empty.'));
  }
  drupal_add_feed(url('changelog/feed'), t('RSS - site changelog'));

  return $output;
}


/**
 * Menu callback; displays an RSS feed containing recent changelog entries.
 */
function changelog_feed() {
  $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n WHERE n.type = 'changes' AND n.status = 1 ORDER BY n.created DESC"), 0, variable_get('feed_default_items', 10));
  $channel['title'] = variable_get('site_name', 'Drupal') .' changelog';
  $channel['link'] = url('changelog', array('absolute' => TRUE));

  $items = array();
  while ($row = db_fetch_object($result)) {
    $items[] = $row->nid;
  }

  node_feed($items, $channel);
}


/**
 * THEME FUNCTIONS
 */

/**
 * Implementation of hook_theme()
 */
function changelog_theme($existing, $type, $theme, $path) {
  return array(
    'changelog_record' => array(
      'arguments' => array('record' => NULL),
    ),
  );
}


function theme_changelog_record($node) {
  global $user;
  $output = '<div class="changelog-authority"><strong>' . format_date($node->created, 'long') . ': ' . $node->author . '</strong></div>';
  $output .= '<div class="changelog-record">' . check_markup($node->body, $node->filter, FALSE) . '</div>';

  //andypost - make changelog editable
  if (user_access('edit any changelog entry') || (user_access('edit own changelog entries') && $node->uid == $user->uid)) {
    $output .= '<div class="links-bottom">'. l(t('Edit'), "node/{$node->nid}/edit") .'</div>';
  }
  return $output;
}