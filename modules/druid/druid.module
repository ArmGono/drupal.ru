<?php

/**
 * @file Вывод различной информации для drupal.ru.
 * @author Axel <axel@drupal.ru>
 * @li GPL v2
 */

define('_SAPE_USER', '25d4d9ba339d64c62676f4b6dcf74cb5');
define('GARBAGE_TERM', 3769); // форум "Мусорка"
/*
 Правила видимости нодов мусорки:
 + недоступны на странице трекера
 + недоступны в боковом блоке трекера
 - не видны анонимам
 - форум блокируется в robots.txt
 - не выносятся на главную
 + не видны на странице blog
 - видны только пользователям с ролью viewall
 */
define('SMOKINGROOM_TERM', 2066); // форум "Курилка"
/*
 Правила видимости нодов курилки:
 + недоступны на странице трекера
 + недоступны в боковом блоке трекера
 - не видны анонимам
 - форум блокируется в robots.txt
 - не выносятся на главную
 */
define('NODES_IN_BLOCK', 20);
define('DRUID_FORUM_VOC', 1);
/*
 Planet
 */
define('PLANET_RU', 1);


function druid_init() {
  // выводим на всех страницах да и хуй с ним, зато можем проставить BLOCK_CACHE_GLOBAL для блока перехода к форумам
  drupal_add_js("function druid_forum_goto(fid) { window.location = '/forum/' + fid; }", 'inline');
}


/**
 * Реализация hook_menu()
 *
 * @return array
 */
function druid_menu() {

  $items = array();

  $items['node/add/forum'] = array( /// тип контента 'forum' на drupal.ru не создаётся напрямую
    'access callback' => FALSE,
  );

  $items['node/add/banner'] = array( /// удалённый тип контента (какого хрена он вообще появлялся в меню?
    'access callback' => FALSE,
  );

  $items['node/%node/toggle/status'] = array( /// удаление спама и депубликация - в модуле samui
    'access callback' => FALSE,
  );

  /// until polls converted to inner polls
  $items['node/add/poll'] = array( /// опросы на drupal.ru реализованы в модуле inner poll и не являются отдельным типом контента
    'access callback' => FALSE,
  );

  $items['tracker'] = array(
    'title' => 'Новое на сайте',
    'page callback' => 'druid_tracker_page',
    'access arguments' => array('access content'),
    'weight' => 1,
    'file' => 'druid.tracker.inc',
  );
  $items['tracker/all'] = array(
    'title' => 'Все обновлённые материалы',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['tracker/my'] = array(
    'title' => 'Материалы с моим участием',
    'access callback' => '_druid_tracker_myrecent_access',
    'page callback' => 'druid_my_tracker_page',
    'file' => 'druid.tracker.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%user/track'] = array(
    'title' => 'Материалы с участием пользователя',
    'page callback' => 'druid_tracker_page',
    'page arguments' => array(1, TRUE),
    'access callback' => '_druid_tracker_user_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'druid.tracker.inc',
  );
  $items['user/%user/track/posts'] = array(
    'title' => 'Материалы с участием пользователя',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['blog'] = array(
    'title' => 'Blogs',
    'page callback' => 'druid_blog_page_last',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'druid.blog.inc',
  );
  $items['blog/%user_uid_optional'] = array(
    'title' => 'My blog',
    'page callback' => 'druid_blog_page_user',
    'page arguments' => array(1),
    'access callback' => 'druid_blog_page_user_access',
    'access arguments' => array(1),
    'file' => 'druid.blog.inc',
  );
  $items['blog/%user/feed'] = array(
    'title' => 'Blogs',
    'page callback' => 'druid_blog_feed_user',
    'page arguments' => array(1),
    'access callback' => 'druid_blog_page_user_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'druid.blog.inc',
  );
  $items['blog/feed'] = array(
    'title' => 'Blogs',
    'page callback' => 'druid_blog_feed_last',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'druid.blog.inc',
  );
  $items['online'] = array(
    'title' => 'Users online',
    'page callback' => 'druid_users_online_page',
    'access arguments' => array('access user profiles'),
    'type' => MENU_CALLBACK,
    'file' => 'druid.blog.inc',
  );

  return $items;
}


/**
 * Access callback for user blog pages.
 * This function copied from blog.module.
 */
function druid_blog_page_user_access($account) {
  // The visitor must be able to access the site's content.
  // For a blog to 'exist' the user must either be able to
  // create new blog entries, or it must have existing posts.
  return $account->uid && user_access('access content') && (user_access('create blog entries', $account) || _druid_blog_post_exists($account));
}


/**
 * Helper function to determine if a user has blog posts already.
 * This function copied from blog.module.
 */
function _druid_blog_post_exists($account) {
  return (bool)db_result(db_query_range(db_rewrite_sql("SELECT 1 FROM {node} n WHERE n.type = 'blog' AND n.uid = %d AND n.status = 1"), $account->uid, 0, 1));
}


function druid_block($op = 'list', $delta = 0, $edit = array()) {
  /// TODO добавить блок статистики
  switch ($op) {
    case 'list':
      $blocks[-1] = array(
        'info'       => 'Новое в блогах и форумах (подробно)',
        'cache'      => BLOCK_CACHE_PER_ROLE,
      );
      $blocks[0] = array(
        'info'       => 'Новое в блогах и форумах',
        'cache'      => BLOCK_CACHE_PER_ROLE,
      );
      $blocks[1] = array(
        'info'       => 'Вывод SAPE.RU для главной страницы сайта',
      	'cache'      => BLOCK_NO_CACHE,
      );
      $blocks[2] = array(
        'info'       => 'Вывод SAPE.RU для внутренних страниц сайта',
        'cache'      => BLOCK_NO_CACHE,
      );
      $blocks[3] = array(
        'info'       => 'Последние сообщения пользователя',
        'cache'      => BLOCK_NO_CACHE, /// XXX разобраться почему не работает PER_USER!
      );
      $blocks[4] = array(
        'info'       => 'Список форумов',
        'cache'      => BLOCK_CACHE_GLOBAL,
      );
      $blocks[5] = array(
        'info'       => 'Статистика по пользователям',
        'cache'      => BLOCK_CACHE_GLOBAL,
      );
      $blocks[6] = array(
        'info'       => 'Источники', // RSS
        'cache'      => BLOCK_CACHE_GLOBAL,
      );
      return $blocks;
    case 'configure':
      $form['druid_block_limit'] = array(
        '#type' => 'select',
        '#title' => 'Сколько выводить элементов?',
        '#options' => array(3 => 3, 5 => 5, 7 => 7, 10 => 10, 12 => 12, 15 => 15, 20 => 20, 25 => 25, 50 => 50, 100 => 100),
        '#description' => 'Количество строк выводимое блоком?',
        '#default_value' => variable_get('druid_block_limit_'. $delta,  NODES_IN_BLOCK),
      );
      return $form;
    case 'save':
      variable_set('druid_block_limit_'. $delta, $edit['druid_block_limit']);
      return;
    case 'view':
      $limit = variable_get('druid_block_limit_'. $delta,  NODES_IN_BLOCK);
      switch ($delta) {
        case -1:
          $block['title'] = "Новое на сайте";
          $block['content'] = druid_lastposts($limit, TRUE); // расширенная инфа
          break;
        case 0:
          $block['title'] = "Новое на сайте";
          $block['content'] = druid_lastposts($limit, FALSE);
          break;
        case 1:
          $output = druid_sape_front();
          $block['title'] = $output ? 'Партнёры' : '';
          $block['content'] = $output;
          break;
        case 2:
          $output = druid_sape_inner();
          $block['title'] = $output ? 'Ссылки партнёров' : '';
          $block['content'] = $output;
          break;
        case 3:
          $output = druid_user_last_nodes($limit);
          $block['title'] = $output ? 'Последние сообщения пользователя' : '';
          $block['content'] = $output;
          break;
        case 4:
          $output = druid_forum_goto();
          $block['title'] = '';
          $block['content'] = $output;
          break;
        case 5:
          $output = druid_users_online();
          $block['title'] = 'Сейчас на сайте';
          $block['content'] = $output;
          break;
        case 6:
          $output = druid_planet_all();
          $block['title'] = 'Источники';
          $block['content'] = $output;
          break;
      }
      return $block;
    default:
      return array();
  }
}

/*
 * Implementation of hook_nodeapi().
 * Очистка кешей главной страницы при изменении нодов находящихся на главной и
 * трекера при изменении любых нодов.
 */
function druid_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch($op) {
    case 'update':
    case 'delete':
    case 'insert':
      cache_clear_all('druid:tracker:user', 'cache', TRUE);
      if ($node->promote) {
        cache_clear_all('druid:page_default:user-', 'cache_page', TRUE);
      }
      break;
  }
}


/**
 * Вывод последних сообщений в форумах и блогах.
 */
function druid_lastposts($limit, $extended = FALSE) {
  $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.vid, n.title, n.created, n.type, u.name, s.comment_count FROM {node} n INNER JOIN {users} u ON n.uid = u.uid INNER JOIN {node_comment_statistics} s ON n.nid = s.nid WHERE n.type NOT IN ('changes', 'page') AND n.status = 1 ORDER BY n.created DESC"), 0, $limit);
  $items = array();
  $num_rows = FALSE;
  while ($node = db_fetch_object($result)) {
    $term = db_fetch_object(db_query('SELECT t.tid, d.name FROM {term_node} t INNER JOIN {term_data} d ON t.tid = d.tid WHERE t.nid = %d AND d.vid = %d', $node->nid, DRUID_FORUM_VOC));
    if ($term->tid == GARBAGE_TERM || $term->tid == SMOKINGROOM_TERM) continue; // skip topics from Курилка & Мусорка
    $items[] = ($extended && $term->tid ? l($term->name, 'forum/'. $term->tid) . ' → ' : '') . l($node->title, 'node/'. $node->nid, array('attributes' => array('title' => "Автор: $node->name". (!empty($node->comment_count) ? '; '. format_plural($node->comment_count, '1 comment', '@count comments') : '')))) . ((node_access('update', $node->nid) || user_access('publish and unpublish')) ? '&nbsp;<span class="unpublish-mark">'. l('x', "node/$node->nid/unpublish", array('attributes' => array('title' => "Депубликовать $node->nid!", 'style' => 'color:#cc6666; text-decoration:none'))). '</span>' : '');
    $num_rows = TRUE;
  }
  return $num_rows ? theme('node_list', $items, '') : FALSE;
}

function druid_sape_front() {
  $output = '<div style="padding-left:10px;padding-bottom:10px;">';
  require_once($_SERVER['DOCUMENT_ROOT'].'/'._SAPE_USER.'/sape.php');
  $o['charset'] = 'UTF-8';
  $o['host'] = 'www.drupal.ru';
  $o['request_uri'] = '/'; // frontpage
  $sape = new SAPE_client($o);
  $links = $sape->return_links();
  if ($links) {
    $output .= $links;
  }
  else {
    $output .= _druid_partner_link();
  }
  unset($o);
  $output .= '</div>';
  return $output;
}

function druid_sape_inner() {
  $output = '<div style="padding-left:10px;padding-bottom:10px;">';
  require_once($_SERVER['DOCUMENT_ROOT'].'/'._SAPE_USER.'/sape.php');
  $o['charset'] = 'UTF-8';
  $o['host'] = 'www.drupal.ru';
  $sape = new SAPE_client($o);
  $links = $sape->return_links(2);
  if ($links) {
    $output .= $links;
    $output .= '<!-- ссылки партнеров drupal.ru --><br />';
    $output .=  $sape->return_links();
  }
  else {
    $output .= _druid_partner_link();
  }
  unset($o);
  $output .= '</div>';
  return $output;
}


/**
 * Возвратить имя месяца на русском в род. падеже по номеру месяца.
 *
 * @param int $num
 */
function _druid_rumonth($num) {
  $months = array(1 => 'января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря');
  return $months[$num];
}


/**
 * Возвращать случайную ссылку на сайты о Drupal.
 *
 * @return string HTML
 */
function _druid_partner_link() {
  $links = array(
     array('http://ubercart.ru', 'Электронные магазины на Übercart'),
     array('http://drupalcon.ru', 'Семинары по CMS Drupal в Москве'),
     array('http://drupalapi.ru', 'API Drupal для программистов'),
     array('http://drupaler.ru', 'Переводы интерфейса Drupal на русском'),
     array('http://drupalcookbook.ru', 'Книга рецептов Drupal'),
     array('http://drupalsearch.ru', 'Поиск по русским сайтам о Drupal'),
     array('http://setegnom.com', 'Уроки по CMS Drupal'),
     array('http://drupalcamp.ru', 'Конференция по Drupal'),
     array('http://moscow.drupalcamp.ru', 'Конференция по Drupal в Москве!'),
     );
  $link = $links[mt_rand(0, count($links)-1)];
  return l($link[1], $link[0]);
}


function druid_node_access($action, $node) {
  switch ($action) {
    case 'publish':
      return !$node->status && node_access('update', $node);
    case 'unpublish':
      return $node->status && node_access('update', $node);
  }
}


function druid_user_last_nodes($limit) {
  /// Based on code by Sadhooklay

  // Get the user id
  $uid = arg(1);

  if (is_numeric($uid)) {
    // SQL query to retrieve the nodes created by the user
    $query = "
      SELECT   created,
               title,
               nid,
               changed,
               status,
               type
      FROM     {node}
      WHERE    uid   ='". db_escape_string($uid) ."'
      AND      status=1
      AND 		 type <> 'changes'
      ORDER BY changed DESC
    ";

    // Execute the query while limiting the number of results
    $result = db_query_range($query, 0, $limit);

    // Defines the 2 columns of our table
    $headers = array(t('Type'), t('Title'));

    // Initializes the rows
    $rows = array();

    // Loop over each found nodes
    while ($node = db_fetch_object($result)) {
      // Add a row to our table
      $rows[] = array(t(node_get_types("name",$node->type)), l($node->title, 'node/'. $node->nid));
    }

    // Ask Drupal to theme our table
    return theme('table', $headers, $rows);
  }

}

/**
 * Access callback for tracker/%user_uid_optional
 */
function _druid_tracker_myrecent_access() {
  global $user;
  // This path is only allowed for authenticated users looking at their own posts.
  return $user->uid && user_access('access content');
}

/**
 * Access callback for user/%user/track
 */
function _druid_tracker_user_access($account) {
  return user_view_access($account) && user_access('access content');
}


/**
 * Вывод списка форумов в блоке.
 *
 * @return html
 */
function druid_forum_goto() {
  $forumlist = _taxonomy_term_select('', 'druid_taxonomy', 0, DRUID_FORUM_VOC, '', FALSE, 'Перейти к форуму:');
  $forumlist['#attributes'] = array('onChange' => 'druid_forum_goto(this.options[this.selectedIndex].value)');
  $forums['list'] = $forumlist;
  /*
   чё-то не заработало и хуй с ним
   $forums['go'] = array(
    '#type' => 'submit',
    '#value' => 'Перейти',
  );
  */

  return drupal_render_form('druid_forum_goto', $forums);
}


function druid_forum_goto_submit($form_id, &$form_state) {
  if ($form_state['values']['list']['value']) {
    drupal_goto('/forum/' . $form_state['values']['list']['value']);
  }
}


function druid_users_online_page() {
	$interval = time() - variable_get('user_block_seconds_online', 900);
	$limit = 240; // XXX hardcoded

	$authenticated_users = db_query('SELECT DISTINCT u.uid, u.name, u.picture FROM {users} u INNER JOIN {sessions} s 		ON u.uid = s.uid WHERE s.timestamp >= %d AND s.uid > 0 ORDER BY s.timestamp DESC', $interval);
	$output = '';
	while ($account = db_fetch_object($authenticated_users)) {
		if ($limit > 0) {
			if ($account->picture) {
				$output .= l(theme('imagecache', '96x96', $account->picture), 'user/' . $account->uid, array('html' => TRUE, 'attributes' => array('title' => $account->name)));
			}
			else {
				$output .= l(theme('imagecache', '96x96', variable_get('user_picture_default', '')), 'user/' . $account->uid, array('html' => TRUE, 'attributes' => array('title' => $account->name)));
			}
			$limit--;
		}
  }
  return $output;
}


function druid_users_online() {
	// статистика анонимов на сайте отключена - сайт не выдает куки анонимам
  if (!user_access('access content')) return;

  // Count users active within the defined period.
  $interval = time() - variable_get('user_block_seconds_online', 900);

  // Perform database queries to gather online user lists.  We use s.timestamp
  // rather than u.access because it is much faster.
	$authenticated_count = db_result(db_query('SELECT DISTINCT COUNT(*) FROM {users} u INNER JOIN {sessions} s ON u.uid = s.uid WHERE s.timestamp >= %d AND s.uid > 0 ORDER BY s.timestamp DESC', $interval));

	$max_seen_users = variable_get('druid_max_seen_users', array(0, 0));
	if ($authenticated_count >= $max_seen_users[0]) {
		variable_set('druid_max_seen_users', array($authenticated_count, time()));
	}

	if (user_access('access user profiles')) {
		$output = l(t('%members', array('%members' => format_plural($authenticated_count, '1 user', '@count users'))), 'online', array('html' => TRUE));
	}
	else {
		$output = t('%members', array('%members' => format_plural($authenticated_count, '1 user', '@count users')));
	}

  $max_seen_users = variable_get('druid_max_seen_users', array(0, 0));

	$output .= '<h2>Пик посещаемости</h2>';

	if ($max_seen_users[0]) {
		$output .= '<div>'. format_plural($max_seen_users[0], '1 user', '@count users') . ':<br />' . format_date($max_seen_users[1], 'long') . '</div>'; // TODO надо бы темизировать вывод этих сообщений
	}

  return $output;

}


/**
 * Возвращает список фидов для заданной категории (или всех категорий).
 */
function druid_planet_all($category = 0) {
  $result = db_query('SELECT f.title, f.link FROM {aggregator_feed} f INNER JOIN {aggregator_category_feed} c ON f.fid = c.fid WHERE c.cid = %d ORDER BY f.title', PLANET_RU);
  $output = '<div class="item-list"><ul>';
  while($item = db_fetch_object($result)) {
    $output .= '<li>' . l($item->title, $item->link) . '</li>';
  }
  return $output . '</ul></div>';
}
